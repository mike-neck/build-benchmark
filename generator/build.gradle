plugins {
  id 'java'
  id 'google-java-format'
}

sourceCompatibility = JavaVersion.VERSION_15
targetCompatibility = JavaVersion.VERSION_15

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  implementation 'org.slf4j:slf4j-api:1.7.30'
  compileOnly 'org.jetbrains:annotations:19.0.0'
  implementation 'com.squareup:javapoet:1.13.0'
  implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.11.2'
  testImplementation 'org.assertj:assertj-core:3.18.1'
  testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
  testCompileOnly 'org.jetbrains:annotations:19.0.0'
}

test {
  useJUnitPlatform()
  jvmArgs('--enable-preview')
}

tasks.withType(JavaCompile) {
  options.compilerArgs = ["--enable-preview"]
}

tasks.withType(JavaExec) {
  jvmArgs('--enable-preview')
}

['with-interface', 'without-interface'].each { String targetProject ->
  def generatorLimit = System.getenv('GENERATOR_LIMIT')
  Closure<List<String>> applicationParameters = { String[] args ->
    if (generatorLimit == null) [args].flatten() as List<String>
    else ["limit:$generatorLimit", args].flatten() as List<String>
  }
  [true, false].each { boolean useLogger ->
    String loggingApp = useLogger? 'logging': 'no-logging'
    JavaExec javaExecTask = tasks.create("generate-${targetProject}-$loggingApp", JavaExec)
    javaExecTask.configure { JavaExec it ->
      it.group('Code-Generation')

      it.workingDir = rootProject.projectDir
      it.mainClass.set('com.example.generator.Generator')
      it.classpath(configurations.runtimeClasspath, sourceSets.main.output)
      it.outputs.dir(rootProject.file("${targetProject}/src/main/java"))
      it.outputs.upToDateWhen { false }
      it.args = applicationParameters(loggingApp, targetProject)
      it.environment('LOG', 'size')
    }
  }
}

task generateDomainsYaml(type: RandomWordsGenerateTask, group: 'build') {
  size.set(6_000)
  outputFile.set(file('src/main/resources/domains.yml'))
}
